#!/usr/bin/env node
// test that nginx reconfigures itself correctly when web containers are scaled up and down
const assert = require('assert');
const cp = require('child_process');

const now = Date.now();

function exec (cmd) { return cp.execSync(cmd, { encoding: 'utf8' }); }
function diff () { return Date.now() - now; }
function log (msg) { console.log(diff() + ' ' + msg); }

log('verifying docker is running...');
const status = exec('docker-machine status default');
assert.equal(status.trim(), 'Running');

var goodHits = 0;
var manContainerId;

function finish (statusCode) {
  if (statusCode === 200 && ++goodHits > 5) {
    pinger.removeListener('message', finish);
    log('stopping pinger and containers...');
    pinger.kill();
    log(exec('docker stop ' + manContainerId));
    log(exec('docker rm ' + manContainerId));
    log(exec('docker-compose stop'));
    log('finished!');
  }
}

function mixComp (statusCode) {
  if (statusCode === 200 && ++goodHits > 5) {
    pinger.removeListener('message', mixComp);
    goodHits = 0;

    log('scaling web to 1... (mixing compose and manual containers)');
    log(exec('docker-compose scale web=1'));

    pinger.on('message', finish);
  }
}

function addMan (statusCode) {
  if (statusCode === 502) {
    pinger.removeListener('message', addMan);
    log('manually adding web container... (should stop bad responses)');
    manContainerId = exec('docker run -d --link jsperfcom_db_1:db --env-file .env --env SERVICE_3000_CHECK_HTTP=/health --env SERVICE_3000_CHECK_INTERVAL=1s jsperfcom_web').trim();
    log('started container ' + manContainerId);
    pinger.send(200);

    pinger.on('message', mixComp);
  }
}

function scaleDown (statusCode) {
  if (++goodHits > 5) {
    pinger.removeListener('message', scaleDown);
    goodHits = 0;

    log('scaling web to 0... (expect bad responses)');
    log(exec('docker-compose scale web=0'));

    pinger.send(502);

    pinger.on('message', addMan);
    log('waiting for 502s...');
  }
}

function scaleUp (statusCode) {
  assert.equal(statusCode, 200);
  log('everything looks to have started up successfully. scaling web to 2...');
  log(exec('docker-compose scale web=2'));

  pinger.on('message', scaleDown);
}

log('starting composed containers...');
log(exec('docker-compose up -d'));

// get IP to request
const url = 'http://' + exec('docker-machine ip default').trim();

// spawn new process to continually ping the load balancer
const pinger = cp.spawn('node', ['_pinger', url, 200], {
  cwd: __dirname,
  stdio: ['ipc', process.stdout, process.stderr]
});

pinger.once('message', scaleUp);

process.on('uncaughtException', function (err) {
  pinger.kill();
  throw err;
});
